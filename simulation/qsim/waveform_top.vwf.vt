// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2024 21:42:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	clk,
	rst,
	sw,
	sampler_tx
);
input  clk;
input  rst;
input [1:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	ALUResult,
	MemReadData,
	MemVal2,
	MemVal7,
	MemWriteData,
	RD1,
	RD2,
	RegFile1,
	RegFile9,
	display_led,
	pipeline_leds,
	prode_register_file,
	sampler_rx
);
input [31:0] ALUResult;
input [31:0] MemReadData;
input [31:0] MemVal2;
input [31:0] MemVal7;
input [31:0] MemWriteData;
input [31:0] RD1;
input [31:0] RD2;
input [31:0] RegFile1;
input [31:0] RegFile9;
input [6:0] display_led;
input [7:0] pipeline_leds;
input [31:0] prode_register_file;
input sampler_rx;

reg [31:0] ALUResult_expected;
reg [31:0] MemReadData_expected;
reg [31:0] MemVal2_expected;
reg [31:0] MemVal7_expected;
reg [31:0] MemWriteData_expected;
reg [31:0] RD1_expected;
reg [31:0] RD2_expected;
reg [31:0] RegFile1_expected;
reg [31:0] RegFile9_expected;
reg [6:0] display_led_expected;
reg [7:0] pipeline_leds_expected;
reg [31:0] prode_register_file_expected;

reg [31:0] ALUResult_prev;
reg [31:0] MemReadData_prev;
reg [31:0] MemVal2_prev;
reg [31:0] MemVal7_prev;
reg [31:0] MemWriteData_prev;
reg [31:0] RD1_prev;
reg [31:0] RD2_prev;
reg [31:0] RegFile1_prev;
reg [31:0] RegFile9_prev;
reg [6:0] display_led_prev;
reg [7:0] pipeline_leds_prev;
reg [31:0] prode_register_file_prev;

reg [31:0] ALUResult_expected_prev;
reg [31:0] MemVal2_expected_prev;
reg [31:0] MemVal7_expected_prev;
reg [31:0] RD1_expected_prev;
reg [31:0] RD2_expected_prev;
reg [31:0] RegFile1_expected_prev;
reg [6:0] display_led_expected_prev;
reg [7:0] pipeline_leds_expected_prev;
reg [31:0] prode_register_file_expected_prev;

reg [31:0] last_ALUResult_exp;
reg [31:0] last_MemVal2_exp;
reg [31:0] last_MemVal7_exp;
reg [31:0] last_RD1_exp;
reg [31:0] last_RD2_exp;
reg [31:0] last_RegFile1_exp;
reg [6:0] last_display_led_exp;
reg [7:0] last_pipeline_leds_exp;
reg [31:0] last_prode_register_file_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUResult_prev = ALUResult;
	MemReadData_prev = MemReadData;
	MemVal2_prev = MemVal2;
	MemVal7_prev = MemVal7;
	MemWriteData_prev = MemWriteData;
	RD1_prev = RD1;
	RD2_prev = RD2;
	RegFile1_prev = RegFile1;
	RegFile9_prev = RegFile9;
	display_led_prev = display_led;
	pipeline_leds_prev = pipeline_leds;
	prode_register_file_prev = prode_register_file;
end

// update expected /o prevs

always @(trigger)
begin
	ALUResult_expected_prev = ALUResult_expected;
	MemVal2_expected_prev = MemVal2_expected;
	MemVal7_expected_prev = MemVal7_expected;
	RD1_expected_prev = RD1_expected;
	RD2_expected_prev = RD2_expected;
	RegFile1_expected_prev = RegFile1_expected;
	display_led_expected_prev = display_led_expected;
	pipeline_leds_expected_prev = pipeline_leds_expected;
	prode_register_file_expected_prev = prode_register_file_expected;
end


// expected ALUResult[ 31 ]
initial
begin
	ALUResult_expected[31] = 1'bX;
end 
// expected ALUResult[ 30 ]
initial
begin
	ALUResult_expected[30] = 1'bX;
end 
// expected ALUResult[ 29 ]
initial
begin
	ALUResult_expected[29] = 1'bX;
end 
// expected ALUResult[ 28 ]
initial
begin
	ALUResult_expected[28] = 1'bX;
end 
// expected ALUResult[ 27 ]
initial
begin
	ALUResult_expected[27] = 1'bX;
end 
// expected ALUResult[ 26 ]
initial
begin
	ALUResult_expected[26] = 1'bX;
end 
// expected ALUResult[ 25 ]
initial
begin
	ALUResult_expected[25] = 1'bX;
end 
// expected ALUResult[ 24 ]
initial
begin
	ALUResult_expected[24] = 1'bX;
end 
// expected ALUResult[ 23 ]
initial
begin
	ALUResult_expected[23] = 1'bX;
end 
// expected ALUResult[ 22 ]
initial
begin
	ALUResult_expected[22] = 1'bX;
end 
// expected ALUResult[ 21 ]
initial
begin
	ALUResult_expected[21] = 1'bX;
end 
// expected ALUResult[ 20 ]
initial
begin
	ALUResult_expected[20] = 1'bX;
end 
// expected ALUResult[ 19 ]
initial
begin
	ALUResult_expected[19] = 1'bX;
end 
// expected ALUResult[ 18 ]
initial
begin
	ALUResult_expected[18] = 1'bX;
end 
// expected ALUResult[ 17 ]
initial
begin
	ALUResult_expected[17] = 1'bX;
end 
// expected ALUResult[ 16 ]
initial
begin
	ALUResult_expected[16] = 1'bX;
end 
// expected ALUResult[ 15 ]
initial
begin
	ALUResult_expected[15] = 1'bX;
end 
// expected ALUResult[ 14 ]
initial
begin
	ALUResult_expected[14] = 1'bX;
end 
// expected ALUResult[ 13 ]
initial
begin
	ALUResult_expected[13] = 1'bX;
end 
// expected ALUResult[ 12 ]
initial
begin
	ALUResult_expected[12] = 1'bX;
end 
// expected ALUResult[ 11 ]
initial
begin
	ALUResult_expected[11] = 1'bX;
end 
// expected ALUResult[ 10 ]
initial
begin
	ALUResult_expected[10] = 1'bX;
end 
// expected ALUResult[ 9 ]
initial
begin
	ALUResult_expected[9] = 1'bX;
end 
// expected ALUResult[ 8 ]
initial
begin
	ALUResult_expected[8] = 1'bX;
end 
// expected ALUResult[ 7 ]
initial
begin
	ALUResult_expected[7] = 1'bX;
end 
// expected ALUResult[ 6 ]
initial
begin
	ALUResult_expected[6] = 1'bX;
end 
// expected ALUResult[ 5 ]
initial
begin
	ALUResult_expected[5] = 1'bX;
end 
// expected ALUResult[ 4 ]
initial
begin
	ALUResult_expected[4] = 1'bX;
end 
// expected ALUResult[ 3 ]
initial
begin
	ALUResult_expected[3] = 1'bX;
end 
// expected ALUResult[ 2 ]
initial
begin
	ALUResult_expected[2] = 1'bX;
end 
// expected ALUResult[ 1 ]
initial
begin
	ALUResult_expected[1] = 1'bX;
end 
// expected ALUResult[ 0 ]
initial
begin
	ALUResult_expected[0] = 1'bX;
end 
// expected display_led[ 6 ]
initial
begin
	display_led_expected[6] = 1'bX;
end 
// expected display_led[ 5 ]
initial
begin
	display_led_expected[5] = 1'bX;
end 
// expected display_led[ 4 ]
initial
begin
	display_led_expected[4] = 1'bX;
end 
// expected display_led[ 3 ]
initial
begin
	display_led_expected[3] = 1'bX;
end 
// expected display_led[ 2 ]
initial
begin
	display_led_expected[2] = 1'bX;
end 
// expected display_led[ 1 ]
initial
begin
	display_led_expected[1] = 1'bX;
end 
// expected display_led[ 0 ]
initial
begin
	display_led_expected[0] = 1'bX;
end 
// expected RD1[ 31 ]
initial
begin
	RD1_expected[31] = 1'bX;
end 
// expected RD1[ 30 ]
initial
begin
	RD1_expected[30] = 1'bX;
end 
// expected RD1[ 29 ]
initial
begin
	RD1_expected[29] = 1'bX;
end 
// expected RD1[ 28 ]
initial
begin
	RD1_expected[28] = 1'bX;
end 
// expected RD1[ 27 ]
initial
begin
	RD1_expected[27] = 1'bX;
end 
// expected RD1[ 26 ]
initial
begin
	RD1_expected[26] = 1'bX;
end 
// expected RD1[ 25 ]
initial
begin
	RD1_expected[25] = 1'bX;
end 
// expected RD1[ 24 ]
initial
begin
	RD1_expected[24] = 1'bX;
end 
// expected RD1[ 23 ]
initial
begin
	RD1_expected[23] = 1'bX;
end 
// expected RD1[ 22 ]
initial
begin
	RD1_expected[22] = 1'bX;
end 
// expected RD1[ 21 ]
initial
begin
	RD1_expected[21] = 1'bX;
end 
// expected RD1[ 20 ]
initial
begin
	RD1_expected[20] = 1'bX;
end 
// expected RD1[ 19 ]
initial
begin
	RD1_expected[19] = 1'bX;
end 
// expected RD1[ 18 ]
initial
begin
	RD1_expected[18] = 1'bX;
end 
// expected RD1[ 17 ]
initial
begin
	RD1_expected[17] = 1'bX;
end 
// expected RD1[ 16 ]
initial
begin
	RD1_expected[16] = 1'bX;
end 
// expected RD1[ 15 ]
initial
begin
	RD1_expected[15] = 1'bX;
end 
// expected RD1[ 14 ]
initial
begin
	RD1_expected[14] = 1'bX;
end 
// expected RD1[ 13 ]
initial
begin
	RD1_expected[13] = 1'bX;
end 
// expected RD1[ 12 ]
initial
begin
	RD1_expected[12] = 1'bX;
end 
// expected RD1[ 11 ]
initial
begin
	RD1_expected[11] = 1'bX;
end 
// expected RD1[ 10 ]
initial
begin
	RD1_expected[10] = 1'bX;
end 
// expected RD1[ 9 ]
initial
begin
	RD1_expected[9] = 1'bX;
end 
// expected RD1[ 8 ]
initial
begin
	RD1_expected[8] = 1'bX;
end 
// expected RD1[ 7 ]
initial
begin
	RD1_expected[7] = 1'bX;
end 
// expected RD1[ 6 ]
initial
begin
	RD1_expected[6] = 1'bX;
end 
// expected RD1[ 5 ]
initial
begin
	RD1_expected[5] = 1'bX;
end 
// expected RD1[ 4 ]
initial
begin
	RD1_expected[4] = 1'bX;
end 
// expected RD1[ 3 ]
initial
begin
	RD1_expected[3] = 1'bX;
end 
// expected RD1[ 2 ]
initial
begin
	RD1_expected[2] = 1'bX;
end 
// expected RD1[ 1 ]
initial
begin
	RD1_expected[1] = 1'bX;
end 
// expected RD1[ 0 ]
initial
begin
	RD1_expected[0] = 1'bX;
end 
// expected RD2[ 31 ]
initial
begin
	RD2_expected[31] = 1'bX;
end 
// expected RD2[ 30 ]
initial
begin
	RD2_expected[30] = 1'bX;
end 
// expected RD2[ 29 ]
initial
begin
	RD2_expected[29] = 1'bX;
end 
// expected RD2[ 28 ]
initial
begin
	RD2_expected[28] = 1'bX;
end 
// expected RD2[ 27 ]
initial
begin
	RD2_expected[27] = 1'bX;
end 
// expected RD2[ 26 ]
initial
begin
	RD2_expected[26] = 1'bX;
end 
// expected RD2[ 25 ]
initial
begin
	RD2_expected[25] = 1'bX;
end 
// expected RD2[ 24 ]
initial
begin
	RD2_expected[24] = 1'bX;
end 
// expected RD2[ 23 ]
initial
begin
	RD2_expected[23] = 1'bX;
end 
// expected RD2[ 22 ]
initial
begin
	RD2_expected[22] = 1'bX;
end 
// expected RD2[ 21 ]
initial
begin
	RD2_expected[21] = 1'bX;
end 
// expected RD2[ 20 ]
initial
begin
	RD2_expected[20] = 1'bX;
end 
// expected RD2[ 19 ]
initial
begin
	RD2_expected[19] = 1'bX;
end 
// expected RD2[ 18 ]
initial
begin
	RD2_expected[18] = 1'bX;
end 
// expected RD2[ 17 ]
initial
begin
	RD2_expected[17] = 1'bX;
end 
// expected RD2[ 16 ]
initial
begin
	RD2_expected[16] = 1'bX;
end 
// expected RD2[ 15 ]
initial
begin
	RD2_expected[15] = 1'bX;
end 
// expected RD2[ 14 ]
initial
begin
	RD2_expected[14] = 1'bX;
end 
// expected RD2[ 13 ]
initial
begin
	RD2_expected[13] = 1'bX;
end 
// expected RD2[ 12 ]
initial
begin
	RD2_expected[12] = 1'bX;
end 
// expected RD2[ 11 ]
initial
begin
	RD2_expected[11] = 1'bX;
end 
// expected RD2[ 10 ]
initial
begin
	RD2_expected[10] = 1'bX;
end 
// expected RD2[ 9 ]
initial
begin
	RD2_expected[9] = 1'bX;
end 
// expected RD2[ 8 ]
initial
begin
	RD2_expected[8] = 1'bX;
end 
// expected RD2[ 7 ]
initial
begin
	RD2_expected[7] = 1'bX;
end 
// expected RD2[ 6 ]
initial
begin
	RD2_expected[6] = 1'bX;
end 
// expected RD2[ 5 ]
initial
begin
	RD2_expected[5] = 1'bX;
end 
// expected RD2[ 4 ]
initial
begin
	RD2_expected[4] = 1'bX;
end 
// expected RD2[ 3 ]
initial
begin
	RD2_expected[3] = 1'bX;
end 
// expected RD2[ 2 ]
initial
begin
	RD2_expected[2] = 1'bX;
end 
// expected RD2[ 1 ]
initial
begin
	RD2_expected[1] = 1'bX;
end 
// expected RD2[ 0 ]
initial
begin
	RD2_expected[0] = 1'bX;
end 
// expected MemVal2[ 31 ]
initial
begin
	MemVal2_expected[31] = 1'bX;
end 
// expected MemVal2[ 30 ]
initial
begin
	MemVal2_expected[30] = 1'bX;
end 
// expected MemVal2[ 29 ]
initial
begin
	MemVal2_expected[29] = 1'bX;
end 
// expected MemVal2[ 28 ]
initial
begin
	MemVal2_expected[28] = 1'bX;
end 
// expected MemVal2[ 27 ]
initial
begin
	MemVal2_expected[27] = 1'bX;
end 
// expected MemVal2[ 26 ]
initial
begin
	MemVal2_expected[26] = 1'bX;
end 
// expected MemVal2[ 25 ]
initial
begin
	MemVal2_expected[25] = 1'bX;
end 
// expected MemVal2[ 24 ]
initial
begin
	MemVal2_expected[24] = 1'bX;
end 
// expected MemVal2[ 23 ]
initial
begin
	MemVal2_expected[23] = 1'bX;
end 
// expected MemVal2[ 22 ]
initial
begin
	MemVal2_expected[22] = 1'bX;
end 
// expected MemVal2[ 21 ]
initial
begin
	MemVal2_expected[21] = 1'bX;
end 
// expected MemVal2[ 20 ]
initial
begin
	MemVal2_expected[20] = 1'bX;
end 
// expected MemVal2[ 19 ]
initial
begin
	MemVal2_expected[19] = 1'bX;
end 
// expected MemVal2[ 18 ]
initial
begin
	MemVal2_expected[18] = 1'bX;
end 
// expected MemVal2[ 17 ]
initial
begin
	MemVal2_expected[17] = 1'bX;
end 
// expected MemVal2[ 16 ]
initial
begin
	MemVal2_expected[16] = 1'bX;
end 
// expected MemVal2[ 15 ]
initial
begin
	MemVal2_expected[15] = 1'bX;
end 
// expected MemVal2[ 14 ]
initial
begin
	MemVal2_expected[14] = 1'bX;
end 
// expected MemVal2[ 13 ]
initial
begin
	MemVal2_expected[13] = 1'bX;
end 
// expected MemVal2[ 12 ]
initial
begin
	MemVal2_expected[12] = 1'bX;
end 
// expected MemVal2[ 11 ]
initial
begin
	MemVal2_expected[11] = 1'bX;
end 
// expected MemVal2[ 10 ]
initial
begin
	MemVal2_expected[10] = 1'bX;
end 
// expected MemVal2[ 9 ]
initial
begin
	MemVal2_expected[9] = 1'bX;
end 
// expected MemVal2[ 8 ]
initial
begin
	MemVal2_expected[8] = 1'bX;
end 
// expected MemVal2[ 7 ]
initial
begin
	MemVal2_expected[7] = 1'bX;
end 
// expected MemVal2[ 6 ]
initial
begin
	MemVal2_expected[6] = 1'bX;
end 
// expected MemVal2[ 5 ]
initial
begin
	MemVal2_expected[5] = 1'bX;
end 
// expected MemVal2[ 4 ]
initial
begin
	MemVal2_expected[4] = 1'bX;
end 
// expected MemVal2[ 3 ]
initial
begin
	MemVal2_expected[3] = 1'bX;
end 
// expected MemVal2[ 2 ]
initial
begin
	MemVal2_expected[2] = 1'bX;
end 
// expected MemVal2[ 1 ]
initial
begin
	MemVal2_expected[1] = 1'bX;
end 
// expected MemVal2[ 0 ]
initial
begin
	MemVal2_expected[0] = 1'bX;
end 
// expected RegFile1[ 31 ]
initial
begin
	RegFile1_expected[31] = 1'bX;
end 
// expected RegFile1[ 30 ]
initial
begin
	RegFile1_expected[30] = 1'bX;
end 
// expected RegFile1[ 29 ]
initial
begin
	RegFile1_expected[29] = 1'bX;
end 
// expected RegFile1[ 28 ]
initial
begin
	RegFile1_expected[28] = 1'bX;
end 
// expected RegFile1[ 27 ]
initial
begin
	RegFile1_expected[27] = 1'bX;
end 
// expected RegFile1[ 26 ]
initial
begin
	RegFile1_expected[26] = 1'bX;
end 
// expected RegFile1[ 25 ]
initial
begin
	RegFile1_expected[25] = 1'bX;
end 
// expected RegFile1[ 24 ]
initial
begin
	RegFile1_expected[24] = 1'bX;
end 
// expected RegFile1[ 23 ]
initial
begin
	RegFile1_expected[23] = 1'bX;
end 
// expected RegFile1[ 22 ]
initial
begin
	RegFile1_expected[22] = 1'bX;
end 
// expected RegFile1[ 21 ]
initial
begin
	RegFile1_expected[21] = 1'bX;
end 
// expected RegFile1[ 20 ]
initial
begin
	RegFile1_expected[20] = 1'bX;
end 
// expected RegFile1[ 19 ]
initial
begin
	RegFile1_expected[19] = 1'bX;
end 
// expected RegFile1[ 18 ]
initial
begin
	RegFile1_expected[18] = 1'bX;
end 
// expected RegFile1[ 17 ]
initial
begin
	RegFile1_expected[17] = 1'bX;
end 
// expected RegFile1[ 16 ]
initial
begin
	RegFile1_expected[16] = 1'bX;
end 
// expected RegFile1[ 15 ]
initial
begin
	RegFile1_expected[15] = 1'bX;
end 
// expected RegFile1[ 14 ]
initial
begin
	RegFile1_expected[14] = 1'bX;
end 
// expected RegFile1[ 13 ]
initial
begin
	RegFile1_expected[13] = 1'bX;
end 
// expected RegFile1[ 12 ]
initial
begin
	RegFile1_expected[12] = 1'bX;
end 
// expected RegFile1[ 11 ]
initial
begin
	RegFile1_expected[11] = 1'bX;
end 
// expected RegFile1[ 10 ]
initial
begin
	RegFile1_expected[10] = 1'bX;
end 
// expected RegFile1[ 9 ]
initial
begin
	RegFile1_expected[9] = 1'bX;
end 
// expected RegFile1[ 8 ]
initial
begin
	RegFile1_expected[8] = 1'bX;
end 
// expected RegFile1[ 7 ]
initial
begin
	RegFile1_expected[7] = 1'bX;
end 
// expected RegFile1[ 6 ]
initial
begin
	RegFile1_expected[6] = 1'bX;
end 
// expected RegFile1[ 5 ]
initial
begin
	RegFile1_expected[5] = 1'bX;
end 
// expected RegFile1[ 4 ]
initial
begin
	RegFile1_expected[4] = 1'bX;
end 
// expected RegFile1[ 3 ]
initial
begin
	RegFile1_expected[3] = 1'bX;
end 
// expected RegFile1[ 2 ]
initial
begin
	RegFile1_expected[2] = 1'bX;
end 
// expected RegFile1[ 1 ]
initial
begin
	RegFile1_expected[1] = 1'bX;
end 
// expected RegFile1[ 0 ]
initial
begin
	RegFile1_expected[0] = 1'bX;
end 
// expected MemVal7[ 31 ]
initial
begin
	MemVal7_expected[31] = 1'bX;
end 
// expected MemVal7[ 30 ]
initial
begin
	MemVal7_expected[30] = 1'bX;
end 
// expected MemVal7[ 29 ]
initial
begin
	MemVal7_expected[29] = 1'bX;
end 
// expected MemVal7[ 28 ]
initial
begin
	MemVal7_expected[28] = 1'bX;
end 
// expected MemVal7[ 27 ]
initial
begin
	MemVal7_expected[27] = 1'bX;
end 
// expected MemVal7[ 26 ]
initial
begin
	MemVal7_expected[26] = 1'bX;
end 
// expected MemVal7[ 25 ]
initial
begin
	MemVal7_expected[25] = 1'bX;
end 
// expected MemVal7[ 24 ]
initial
begin
	MemVal7_expected[24] = 1'bX;
end 
// expected MemVal7[ 23 ]
initial
begin
	MemVal7_expected[23] = 1'bX;
end 
// expected MemVal7[ 22 ]
initial
begin
	MemVal7_expected[22] = 1'bX;
end 
// expected MemVal7[ 21 ]
initial
begin
	MemVal7_expected[21] = 1'bX;
end 
// expected MemVal7[ 20 ]
initial
begin
	MemVal7_expected[20] = 1'bX;
end 
// expected MemVal7[ 19 ]
initial
begin
	MemVal7_expected[19] = 1'bX;
end 
// expected MemVal7[ 18 ]
initial
begin
	MemVal7_expected[18] = 1'bX;
end 
// expected MemVal7[ 17 ]
initial
begin
	MemVal7_expected[17] = 1'bX;
end 
// expected MemVal7[ 16 ]
initial
begin
	MemVal7_expected[16] = 1'bX;
end 
// expected MemVal7[ 15 ]
initial
begin
	MemVal7_expected[15] = 1'bX;
end 
// expected MemVal7[ 14 ]
initial
begin
	MemVal7_expected[14] = 1'bX;
end 
// expected MemVal7[ 13 ]
initial
begin
	MemVal7_expected[13] = 1'bX;
end 
// expected MemVal7[ 12 ]
initial
begin
	MemVal7_expected[12] = 1'bX;
end 
// expected MemVal7[ 11 ]
initial
begin
	MemVal7_expected[11] = 1'bX;
end 
// expected MemVal7[ 10 ]
initial
begin
	MemVal7_expected[10] = 1'bX;
end 
// expected MemVal7[ 9 ]
initial
begin
	MemVal7_expected[9] = 1'bX;
end 
// expected MemVal7[ 8 ]
initial
begin
	MemVal7_expected[8] = 1'bX;
end 
// expected MemVal7[ 7 ]
initial
begin
	MemVal7_expected[7] = 1'bX;
end 
// expected MemVal7[ 6 ]
initial
begin
	MemVal7_expected[6] = 1'bX;
end 
// expected MemVal7[ 5 ]
initial
begin
	MemVal7_expected[5] = 1'bX;
end 
// expected MemVal7[ 4 ]
initial
begin
	MemVal7_expected[4] = 1'bX;
end 
// expected MemVal7[ 3 ]
initial
begin
	MemVal7_expected[3] = 1'bX;
end 
// expected MemVal7[ 2 ]
initial
begin
	MemVal7_expected[2] = 1'bX;
end 
// expected MemVal7[ 1 ]
initial
begin
	MemVal7_expected[1] = 1'bX;
end 
// expected MemVal7[ 0 ]
initial
begin
	MemVal7_expected[0] = 1'bX;
end 
// expected pipeline_leds[ 7 ]
initial
begin
	pipeline_leds_expected[7] = 1'bX;
end 
// expected pipeline_leds[ 6 ]
initial
begin
	pipeline_leds_expected[6] = 1'bX;
end 
// expected pipeline_leds[ 5 ]
initial
begin
	pipeline_leds_expected[5] = 1'bX;
end 
// expected pipeline_leds[ 4 ]
initial
begin
	pipeline_leds_expected[4] = 1'bX;
end 
// expected pipeline_leds[ 3 ]
initial
begin
	pipeline_leds_expected[3] = 1'bX;
end 
// expected pipeline_leds[ 2 ]
initial
begin
	pipeline_leds_expected[2] = 1'bX;
end 
// expected pipeline_leds[ 1 ]
initial
begin
	pipeline_leds_expected[1] = 1'bX;
end 
// expected pipeline_leds[ 0 ]
initial
begin
	pipeline_leds_expected[0] = 1'bX;
end 
// expected prode_register_file[ 31 ]
initial
begin
	prode_register_file_expected[31] = 1'bX;
end 
// expected prode_register_file[ 30 ]
initial
begin
	prode_register_file_expected[30] = 1'bX;
end 
// expected prode_register_file[ 29 ]
initial
begin
	prode_register_file_expected[29] = 1'bX;
end 
// expected prode_register_file[ 28 ]
initial
begin
	prode_register_file_expected[28] = 1'bX;
end 
// expected prode_register_file[ 27 ]
initial
begin
	prode_register_file_expected[27] = 1'bX;
end 
// expected prode_register_file[ 26 ]
initial
begin
	prode_register_file_expected[26] = 1'bX;
end 
// expected prode_register_file[ 25 ]
initial
begin
	prode_register_file_expected[25] = 1'bX;
end 
// expected prode_register_file[ 24 ]
initial
begin
	prode_register_file_expected[24] = 1'bX;
end 
// expected prode_register_file[ 23 ]
initial
begin
	prode_register_file_expected[23] = 1'bX;
end 
// expected prode_register_file[ 22 ]
initial
begin
	prode_register_file_expected[22] = 1'bX;
end 
// expected prode_register_file[ 21 ]
initial
begin
	prode_register_file_expected[21] = 1'bX;
end 
// expected prode_register_file[ 20 ]
initial
begin
	prode_register_file_expected[20] = 1'bX;
end 
// expected prode_register_file[ 19 ]
initial
begin
	prode_register_file_expected[19] = 1'bX;
end 
// expected prode_register_file[ 18 ]
initial
begin
	prode_register_file_expected[18] = 1'bX;
end 
// expected prode_register_file[ 17 ]
initial
begin
	prode_register_file_expected[17] = 1'bX;
end 
// expected prode_register_file[ 16 ]
initial
begin
	prode_register_file_expected[16] = 1'bX;
end 
// expected prode_register_file[ 15 ]
initial
begin
	prode_register_file_expected[15] = 1'bX;
end 
// expected prode_register_file[ 14 ]
initial
begin
	prode_register_file_expected[14] = 1'bX;
end 
// expected prode_register_file[ 13 ]
initial
begin
	prode_register_file_expected[13] = 1'bX;
end 
// expected prode_register_file[ 12 ]
initial
begin
	prode_register_file_expected[12] = 1'bX;
end 
// expected prode_register_file[ 11 ]
initial
begin
	prode_register_file_expected[11] = 1'bX;
end 
// expected prode_register_file[ 10 ]
initial
begin
	prode_register_file_expected[10] = 1'bX;
end 
// expected prode_register_file[ 9 ]
initial
begin
	prode_register_file_expected[9] = 1'bX;
end 
// expected prode_register_file[ 8 ]
initial
begin
	prode_register_file_expected[8] = 1'bX;
end 
// expected prode_register_file[ 7 ]
initial
begin
	prode_register_file_expected[7] = 1'bX;
end 
// expected prode_register_file[ 6 ]
initial
begin
	prode_register_file_expected[6] = 1'bX;
end 
// expected prode_register_file[ 5 ]
initial
begin
	prode_register_file_expected[5] = 1'bX;
end 
// expected prode_register_file[ 4 ]
initial
begin
	prode_register_file_expected[4] = 1'bX;
end 
// expected prode_register_file[ 3 ]
initial
begin
	prode_register_file_expected[3] = 1'bX;
end 
// expected prode_register_file[ 2 ]
initial
begin
	prode_register_file_expected[2] = 1'bX;
end 
// expected prode_register_file[ 1 ]
initial
begin
	prode_register_file_expected[1] = 1'bX;
end 
// expected prode_register_file[ 0 ]
initial
begin
	prode_register_file_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUResult_expected or ALUResult or MemReadData_expected or MemReadData or MemVal2_expected or MemVal2 or MemVal7_expected or MemVal7 or MemWriteData_expected or MemWriteData or RD1_expected or RD1 or RD2_expected or RD2 or RegFile1_expected or RegFile1 or RegFile9_expected or RegFile9 or display_led_expected or display_led or pipeline_leds_expected or pipeline_leds or prode_register_file_expected or prode_register_file)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUResult = %b | expected MemReadData = %b | expected MemVal2 = %b | expected MemVal7 = %b | expected MemWriteData = %b | expected RD1 = %b | expected RD2 = %b | expected RegFile1 = %b | expected RegFile9 = %b | expected display_led = %b | expected pipeline_leds = %b | expected prode_register_file = %b | ",ALUResult_expected_prev,MemReadData_expected_prev,MemVal2_expected_prev,MemVal7_expected_prev,MemWriteData_expected_prev,RD1_expected_prev,RD2_expected_prev,RegFile1_expected_prev,RegFile9_expected_prev,display_led_expected_prev,pipeline_leds_expected_prev,prode_register_file_expected_prev);
	$display("| real ALUResult = %b | real MemReadData = %b | real MemVal2 = %b | real MemVal7 = %b | real MemWriteData = %b | real RD1 = %b | real RD2 = %b | real RegFile1 = %b | real RegFile9 = %b | real display_led = %b | real pipeline_leds = %b | real prode_register_file = %b | ",ALUResult_prev,MemReadData_prev,MemVal2_prev,MemVal7_prev,MemWriteData_prev,RD1_prev,RD2_prev,RegFile1_prev,RegFile9_prev,display_led_prev,pipeline_leds_prev,prode_register_file_prev);
`endif
	if (
		( ALUResult_expected_prev[0] !== 1'bx ) && ( ALUResult_prev[0] !== ALUResult_expected_prev[0] )
		&& ((ALUResult_expected_prev[0] !== last_ALUResult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[0] = ALUResult_expected_prev[0];
	end
	if (
		( ALUResult_expected_prev[1] !== 1'bx ) && ( ALUResult_prev[1] !== ALUResult_expected_prev[1] )
		&& ((ALUResult_expected_prev[1] !== last_ALUResult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[1] = ALUResult_expected_prev[1];
	end
	if (
		( ALUResult_expected_prev[2] !== 1'bx ) && ( ALUResult_prev[2] !== ALUResult_expected_prev[2] )
		&& ((ALUResult_expected_prev[2] !== last_ALUResult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[2] = ALUResult_expected_prev[2];
	end
	if (
		( ALUResult_expected_prev[3] !== 1'bx ) && ( ALUResult_prev[3] !== ALUResult_expected_prev[3] )
		&& ((ALUResult_expected_prev[3] !== last_ALUResult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[3] = ALUResult_expected_prev[3];
	end
	if (
		( ALUResult_expected_prev[4] !== 1'bx ) && ( ALUResult_prev[4] !== ALUResult_expected_prev[4] )
		&& ((ALUResult_expected_prev[4] !== last_ALUResult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[4] = ALUResult_expected_prev[4];
	end
	if (
		( ALUResult_expected_prev[5] !== 1'bx ) && ( ALUResult_prev[5] !== ALUResult_expected_prev[5] )
		&& ((ALUResult_expected_prev[5] !== last_ALUResult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[5] = ALUResult_expected_prev[5];
	end
	if (
		( ALUResult_expected_prev[6] !== 1'bx ) && ( ALUResult_prev[6] !== ALUResult_expected_prev[6] )
		&& ((ALUResult_expected_prev[6] !== last_ALUResult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[6] = ALUResult_expected_prev[6];
	end
	if (
		( ALUResult_expected_prev[7] !== 1'bx ) && ( ALUResult_prev[7] !== ALUResult_expected_prev[7] )
		&& ((ALUResult_expected_prev[7] !== last_ALUResult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[7] = ALUResult_expected_prev[7];
	end
	if (
		( ALUResult_expected_prev[8] !== 1'bx ) && ( ALUResult_prev[8] !== ALUResult_expected_prev[8] )
		&& ((ALUResult_expected_prev[8] !== last_ALUResult_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[8] = ALUResult_expected_prev[8];
	end
	if (
		( ALUResult_expected_prev[9] !== 1'bx ) && ( ALUResult_prev[9] !== ALUResult_expected_prev[9] )
		&& ((ALUResult_expected_prev[9] !== last_ALUResult_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[9] = ALUResult_expected_prev[9];
	end
	if (
		( ALUResult_expected_prev[10] !== 1'bx ) && ( ALUResult_prev[10] !== ALUResult_expected_prev[10] )
		&& ((ALUResult_expected_prev[10] !== last_ALUResult_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[10] = ALUResult_expected_prev[10];
	end
	if (
		( ALUResult_expected_prev[11] !== 1'bx ) && ( ALUResult_prev[11] !== ALUResult_expected_prev[11] )
		&& ((ALUResult_expected_prev[11] !== last_ALUResult_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[11] = ALUResult_expected_prev[11];
	end
	if (
		( ALUResult_expected_prev[12] !== 1'bx ) && ( ALUResult_prev[12] !== ALUResult_expected_prev[12] )
		&& ((ALUResult_expected_prev[12] !== last_ALUResult_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[12] = ALUResult_expected_prev[12];
	end
	if (
		( ALUResult_expected_prev[13] !== 1'bx ) && ( ALUResult_prev[13] !== ALUResult_expected_prev[13] )
		&& ((ALUResult_expected_prev[13] !== last_ALUResult_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[13] = ALUResult_expected_prev[13];
	end
	if (
		( ALUResult_expected_prev[14] !== 1'bx ) && ( ALUResult_prev[14] !== ALUResult_expected_prev[14] )
		&& ((ALUResult_expected_prev[14] !== last_ALUResult_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[14] = ALUResult_expected_prev[14];
	end
	if (
		( ALUResult_expected_prev[15] !== 1'bx ) && ( ALUResult_prev[15] !== ALUResult_expected_prev[15] )
		&& ((ALUResult_expected_prev[15] !== last_ALUResult_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[15] = ALUResult_expected_prev[15];
	end
	if (
		( ALUResult_expected_prev[16] !== 1'bx ) && ( ALUResult_prev[16] !== ALUResult_expected_prev[16] )
		&& ((ALUResult_expected_prev[16] !== last_ALUResult_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[16] = ALUResult_expected_prev[16];
	end
	if (
		( ALUResult_expected_prev[17] !== 1'bx ) && ( ALUResult_prev[17] !== ALUResult_expected_prev[17] )
		&& ((ALUResult_expected_prev[17] !== last_ALUResult_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[17] = ALUResult_expected_prev[17];
	end
	if (
		( ALUResult_expected_prev[18] !== 1'bx ) && ( ALUResult_prev[18] !== ALUResult_expected_prev[18] )
		&& ((ALUResult_expected_prev[18] !== last_ALUResult_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[18] = ALUResult_expected_prev[18];
	end
	if (
		( ALUResult_expected_prev[19] !== 1'bx ) && ( ALUResult_prev[19] !== ALUResult_expected_prev[19] )
		&& ((ALUResult_expected_prev[19] !== last_ALUResult_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[19] = ALUResult_expected_prev[19];
	end
	if (
		( ALUResult_expected_prev[20] !== 1'bx ) && ( ALUResult_prev[20] !== ALUResult_expected_prev[20] )
		&& ((ALUResult_expected_prev[20] !== last_ALUResult_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[20] = ALUResult_expected_prev[20];
	end
	if (
		( ALUResult_expected_prev[21] !== 1'bx ) && ( ALUResult_prev[21] !== ALUResult_expected_prev[21] )
		&& ((ALUResult_expected_prev[21] !== last_ALUResult_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[21] = ALUResult_expected_prev[21];
	end
	if (
		( ALUResult_expected_prev[22] !== 1'bx ) && ( ALUResult_prev[22] !== ALUResult_expected_prev[22] )
		&& ((ALUResult_expected_prev[22] !== last_ALUResult_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[22] = ALUResult_expected_prev[22];
	end
	if (
		( ALUResult_expected_prev[23] !== 1'bx ) && ( ALUResult_prev[23] !== ALUResult_expected_prev[23] )
		&& ((ALUResult_expected_prev[23] !== last_ALUResult_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[23] = ALUResult_expected_prev[23];
	end
	if (
		( ALUResult_expected_prev[24] !== 1'bx ) && ( ALUResult_prev[24] !== ALUResult_expected_prev[24] )
		&& ((ALUResult_expected_prev[24] !== last_ALUResult_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[24] = ALUResult_expected_prev[24];
	end
	if (
		( ALUResult_expected_prev[25] !== 1'bx ) && ( ALUResult_prev[25] !== ALUResult_expected_prev[25] )
		&& ((ALUResult_expected_prev[25] !== last_ALUResult_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[25] = ALUResult_expected_prev[25];
	end
	if (
		( ALUResult_expected_prev[26] !== 1'bx ) && ( ALUResult_prev[26] !== ALUResult_expected_prev[26] )
		&& ((ALUResult_expected_prev[26] !== last_ALUResult_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[26] = ALUResult_expected_prev[26];
	end
	if (
		( ALUResult_expected_prev[27] !== 1'bx ) && ( ALUResult_prev[27] !== ALUResult_expected_prev[27] )
		&& ((ALUResult_expected_prev[27] !== last_ALUResult_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[27] = ALUResult_expected_prev[27];
	end
	if (
		( ALUResult_expected_prev[28] !== 1'bx ) && ( ALUResult_prev[28] !== ALUResult_expected_prev[28] )
		&& ((ALUResult_expected_prev[28] !== last_ALUResult_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[28] = ALUResult_expected_prev[28];
	end
	if (
		( ALUResult_expected_prev[29] !== 1'bx ) && ( ALUResult_prev[29] !== ALUResult_expected_prev[29] )
		&& ((ALUResult_expected_prev[29] !== last_ALUResult_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[29] = ALUResult_expected_prev[29];
	end
	if (
		( ALUResult_expected_prev[30] !== 1'bx ) && ( ALUResult_prev[30] !== ALUResult_expected_prev[30] )
		&& ((ALUResult_expected_prev[30] !== last_ALUResult_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[30] = ALUResult_expected_prev[30];
	end
	if (
		( ALUResult_expected_prev[31] !== 1'bx ) && ( ALUResult_prev[31] !== ALUResult_expected_prev[31] )
		&& ((ALUResult_expected_prev[31] !== last_ALUResult_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[31] = ALUResult_expected_prev[31];
	end
	if (
		( MemVal2_expected_prev[0] !== 1'bx ) && ( MemVal2_prev[0] !== MemVal2_expected_prev[0] )
		&& ((MemVal2_expected_prev[0] !== last_MemVal2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[0] = MemVal2_expected_prev[0];
	end
	if (
		( MemVal2_expected_prev[1] !== 1'bx ) && ( MemVal2_prev[1] !== MemVal2_expected_prev[1] )
		&& ((MemVal2_expected_prev[1] !== last_MemVal2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[1] = MemVal2_expected_prev[1];
	end
	if (
		( MemVal2_expected_prev[2] !== 1'bx ) && ( MemVal2_prev[2] !== MemVal2_expected_prev[2] )
		&& ((MemVal2_expected_prev[2] !== last_MemVal2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[2] = MemVal2_expected_prev[2];
	end
	if (
		( MemVal2_expected_prev[3] !== 1'bx ) && ( MemVal2_prev[3] !== MemVal2_expected_prev[3] )
		&& ((MemVal2_expected_prev[3] !== last_MemVal2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[3] = MemVal2_expected_prev[3];
	end
	if (
		( MemVal2_expected_prev[4] !== 1'bx ) && ( MemVal2_prev[4] !== MemVal2_expected_prev[4] )
		&& ((MemVal2_expected_prev[4] !== last_MemVal2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[4] = MemVal2_expected_prev[4];
	end
	if (
		( MemVal2_expected_prev[5] !== 1'bx ) && ( MemVal2_prev[5] !== MemVal2_expected_prev[5] )
		&& ((MemVal2_expected_prev[5] !== last_MemVal2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[5] = MemVal2_expected_prev[5];
	end
	if (
		( MemVal2_expected_prev[6] !== 1'bx ) && ( MemVal2_prev[6] !== MemVal2_expected_prev[6] )
		&& ((MemVal2_expected_prev[6] !== last_MemVal2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[6] = MemVal2_expected_prev[6];
	end
	if (
		( MemVal2_expected_prev[7] !== 1'bx ) && ( MemVal2_prev[7] !== MemVal2_expected_prev[7] )
		&& ((MemVal2_expected_prev[7] !== last_MemVal2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[7] = MemVal2_expected_prev[7];
	end
	if (
		( MemVal2_expected_prev[8] !== 1'bx ) && ( MemVal2_prev[8] !== MemVal2_expected_prev[8] )
		&& ((MemVal2_expected_prev[8] !== last_MemVal2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[8] = MemVal2_expected_prev[8];
	end
	if (
		( MemVal2_expected_prev[9] !== 1'bx ) && ( MemVal2_prev[9] !== MemVal2_expected_prev[9] )
		&& ((MemVal2_expected_prev[9] !== last_MemVal2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[9] = MemVal2_expected_prev[9];
	end
	if (
		( MemVal2_expected_prev[10] !== 1'bx ) && ( MemVal2_prev[10] !== MemVal2_expected_prev[10] )
		&& ((MemVal2_expected_prev[10] !== last_MemVal2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[10] = MemVal2_expected_prev[10];
	end
	if (
		( MemVal2_expected_prev[11] !== 1'bx ) && ( MemVal2_prev[11] !== MemVal2_expected_prev[11] )
		&& ((MemVal2_expected_prev[11] !== last_MemVal2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[11] = MemVal2_expected_prev[11];
	end
	if (
		( MemVal2_expected_prev[12] !== 1'bx ) && ( MemVal2_prev[12] !== MemVal2_expected_prev[12] )
		&& ((MemVal2_expected_prev[12] !== last_MemVal2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[12] = MemVal2_expected_prev[12];
	end
	if (
		( MemVal2_expected_prev[13] !== 1'bx ) && ( MemVal2_prev[13] !== MemVal2_expected_prev[13] )
		&& ((MemVal2_expected_prev[13] !== last_MemVal2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[13] = MemVal2_expected_prev[13];
	end
	if (
		( MemVal2_expected_prev[14] !== 1'bx ) && ( MemVal2_prev[14] !== MemVal2_expected_prev[14] )
		&& ((MemVal2_expected_prev[14] !== last_MemVal2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[14] = MemVal2_expected_prev[14];
	end
	if (
		( MemVal2_expected_prev[15] !== 1'bx ) && ( MemVal2_prev[15] !== MemVal2_expected_prev[15] )
		&& ((MemVal2_expected_prev[15] !== last_MemVal2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[15] = MemVal2_expected_prev[15];
	end
	if (
		( MemVal2_expected_prev[16] !== 1'bx ) && ( MemVal2_prev[16] !== MemVal2_expected_prev[16] )
		&& ((MemVal2_expected_prev[16] !== last_MemVal2_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[16] = MemVal2_expected_prev[16];
	end
	if (
		( MemVal2_expected_prev[17] !== 1'bx ) && ( MemVal2_prev[17] !== MemVal2_expected_prev[17] )
		&& ((MemVal2_expected_prev[17] !== last_MemVal2_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[17] = MemVal2_expected_prev[17];
	end
	if (
		( MemVal2_expected_prev[18] !== 1'bx ) && ( MemVal2_prev[18] !== MemVal2_expected_prev[18] )
		&& ((MemVal2_expected_prev[18] !== last_MemVal2_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[18] = MemVal2_expected_prev[18];
	end
	if (
		( MemVal2_expected_prev[19] !== 1'bx ) && ( MemVal2_prev[19] !== MemVal2_expected_prev[19] )
		&& ((MemVal2_expected_prev[19] !== last_MemVal2_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[19] = MemVal2_expected_prev[19];
	end
	if (
		( MemVal2_expected_prev[20] !== 1'bx ) && ( MemVal2_prev[20] !== MemVal2_expected_prev[20] )
		&& ((MemVal2_expected_prev[20] !== last_MemVal2_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[20] = MemVal2_expected_prev[20];
	end
	if (
		( MemVal2_expected_prev[21] !== 1'bx ) && ( MemVal2_prev[21] !== MemVal2_expected_prev[21] )
		&& ((MemVal2_expected_prev[21] !== last_MemVal2_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[21] = MemVal2_expected_prev[21];
	end
	if (
		( MemVal2_expected_prev[22] !== 1'bx ) && ( MemVal2_prev[22] !== MemVal2_expected_prev[22] )
		&& ((MemVal2_expected_prev[22] !== last_MemVal2_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[22] = MemVal2_expected_prev[22];
	end
	if (
		( MemVal2_expected_prev[23] !== 1'bx ) && ( MemVal2_prev[23] !== MemVal2_expected_prev[23] )
		&& ((MemVal2_expected_prev[23] !== last_MemVal2_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[23] = MemVal2_expected_prev[23];
	end
	if (
		( MemVal2_expected_prev[24] !== 1'bx ) && ( MemVal2_prev[24] !== MemVal2_expected_prev[24] )
		&& ((MemVal2_expected_prev[24] !== last_MemVal2_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[24] = MemVal2_expected_prev[24];
	end
	if (
		( MemVal2_expected_prev[25] !== 1'bx ) && ( MemVal2_prev[25] !== MemVal2_expected_prev[25] )
		&& ((MemVal2_expected_prev[25] !== last_MemVal2_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[25] = MemVal2_expected_prev[25];
	end
	if (
		( MemVal2_expected_prev[26] !== 1'bx ) && ( MemVal2_prev[26] !== MemVal2_expected_prev[26] )
		&& ((MemVal2_expected_prev[26] !== last_MemVal2_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[26] = MemVal2_expected_prev[26];
	end
	if (
		( MemVal2_expected_prev[27] !== 1'bx ) && ( MemVal2_prev[27] !== MemVal2_expected_prev[27] )
		&& ((MemVal2_expected_prev[27] !== last_MemVal2_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[27] = MemVal2_expected_prev[27];
	end
	if (
		( MemVal2_expected_prev[28] !== 1'bx ) && ( MemVal2_prev[28] !== MemVal2_expected_prev[28] )
		&& ((MemVal2_expected_prev[28] !== last_MemVal2_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[28] = MemVal2_expected_prev[28];
	end
	if (
		( MemVal2_expected_prev[29] !== 1'bx ) && ( MemVal2_prev[29] !== MemVal2_expected_prev[29] )
		&& ((MemVal2_expected_prev[29] !== last_MemVal2_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[29] = MemVal2_expected_prev[29];
	end
	if (
		( MemVal2_expected_prev[30] !== 1'bx ) && ( MemVal2_prev[30] !== MemVal2_expected_prev[30] )
		&& ((MemVal2_expected_prev[30] !== last_MemVal2_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[30] = MemVal2_expected_prev[30];
	end
	if (
		( MemVal2_expected_prev[31] !== 1'bx ) && ( MemVal2_prev[31] !== MemVal2_expected_prev[31] )
		&& ((MemVal2_expected_prev[31] !== last_MemVal2_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal2_expected_prev);
		$display ("     Real value = %b", MemVal2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemVal2_exp[31] = MemVal2_expected_prev[31];
	end
	if (
		( MemVal7_expected_prev[0] !== 1'bx ) && ( MemVal7_prev[0] !== MemVal7_expected_prev[0] )
		&& ((MemVal7_expected_prev[0] !== last_MemVal7_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[0] = MemVal7_expected_prev[0];
	end
	if (
		( MemVal7_expected_prev[1] !== 1'bx ) && ( MemVal7_prev[1] !== MemVal7_expected_prev[1] )
		&& ((MemVal7_expected_prev[1] !== last_MemVal7_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[1] = MemVal7_expected_prev[1];
	end
	if (
		( MemVal7_expected_prev[2] !== 1'bx ) && ( MemVal7_prev[2] !== MemVal7_expected_prev[2] )
		&& ((MemVal7_expected_prev[2] !== last_MemVal7_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[2] = MemVal7_expected_prev[2];
	end
	if (
		( MemVal7_expected_prev[3] !== 1'bx ) && ( MemVal7_prev[3] !== MemVal7_expected_prev[3] )
		&& ((MemVal7_expected_prev[3] !== last_MemVal7_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[3] = MemVal7_expected_prev[3];
	end
	if (
		( MemVal7_expected_prev[4] !== 1'bx ) && ( MemVal7_prev[4] !== MemVal7_expected_prev[4] )
		&& ((MemVal7_expected_prev[4] !== last_MemVal7_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[4] = MemVal7_expected_prev[4];
	end
	if (
		( MemVal7_expected_prev[5] !== 1'bx ) && ( MemVal7_prev[5] !== MemVal7_expected_prev[5] )
		&& ((MemVal7_expected_prev[5] !== last_MemVal7_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[5] = MemVal7_expected_prev[5];
	end
	if (
		( MemVal7_expected_prev[6] !== 1'bx ) && ( MemVal7_prev[6] !== MemVal7_expected_prev[6] )
		&& ((MemVal7_expected_prev[6] !== last_MemVal7_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[6] = MemVal7_expected_prev[6];
	end
	if (
		( MemVal7_expected_prev[7] !== 1'bx ) && ( MemVal7_prev[7] !== MemVal7_expected_prev[7] )
		&& ((MemVal7_expected_prev[7] !== last_MemVal7_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[7] = MemVal7_expected_prev[7];
	end
	if (
		( MemVal7_expected_prev[8] !== 1'bx ) && ( MemVal7_prev[8] !== MemVal7_expected_prev[8] )
		&& ((MemVal7_expected_prev[8] !== last_MemVal7_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[8] = MemVal7_expected_prev[8];
	end
	if (
		( MemVal7_expected_prev[9] !== 1'bx ) && ( MemVal7_prev[9] !== MemVal7_expected_prev[9] )
		&& ((MemVal7_expected_prev[9] !== last_MemVal7_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[9] = MemVal7_expected_prev[9];
	end
	if (
		( MemVal7_expected_prev[10] !== 1'bx ) && ( MemVal7_prev[10] !== MemVal7_expected_prev[10] )
		&& ((MemVal7_expected_prev[10] !== last_MemVal7_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[10] = MemVal7_expected_prev[10];
	end
	if (
		( MemVal7_expected_prev[11] !== 1'bx ) && ( MemVal7_prev[11] !== MemVal7_expected_prev[11] )
		&& ((MemVal7_expected_prev[11] !== last_MemVal7_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[11] = MemVal7_expected_prev[11];
	end
	if (
		( MemVal7_expected_prev[12] !== 1'bx ) && ( MemVal7_prev[12] !== MemVal7_expected_prev[12] )
		&& ((MemVal7_expected_prev[12] !== last_MemVal7_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[12] = MemVal7_expected_prev[12];
	end
	if (
		( MemVal7_expected_prev[13] !== 1'bx ) && ( MemVal7_prev[13] !== MemVal7_expected_prev[13] )
		&& ((MemVal7_expected_prev[13] !== last_MemVal7_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[13] = MemVal7_expected_prev[13];
	end
	if (
		( MemVal7_expected_prev[14] !== 1'bx ) && ( MemVal7_prev[14] !== MemVal7_expected_prev[14] )
		&& ((MemVal7_expected_prev[14] !== last_MemVal7_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[14] = MemVal7_expected_prev[14];
	end
	if (
		( MemVal7_expected_prev[15] !== 1'bx ) && ( MemVal7_prev[15] !== MemVal7_expected_prev[15] )
		&& ((MemVal7_expected_prev[15] !== last_MemVal7_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[15] = MemVal7_expected_prev[15];
	end
	if (
		( MemVal7_expected_prev[16] !== 1'bx ) && ( MemVal7_prev[16] !== MemVal7_expected_prev[16] )
		&& ((MemVal7_expected_prev[16] !== last_MemVal7_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[16] = MemVal7_expected_prev[16];
	end
	if (
		( MemVal7_expected_prev[17] !== 1'bx ) && ( MemVal7_prev[17] !== MemVal7_expected_prev[17] )
		&& ((MemVal7_expected_prev[17] !== last_MemVal7_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[17] = MemVal7_expected_prev[17];
	end
	if (
		( MemVal7_expected_prev[18] !== 1'bx ) && ( MemVal7_prev[18] !== MemVal7_expected_prev[18] )
		&& ((MemVal7_expected_prev[18] !== last_MemVal7_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[18] = MemVal7_expected_prev[18];
	end
	if (
		( MemVal7_expected_prev[19] !== 1'bx ) && ( MemVal7_prev[19] !== MemVal7_expected_prev[19] )
		&& ((MemVal7_expected_prev[19] !== last_MemVal7_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[19] = MemVal7_expected_prev[19];
	end
	if (
		( MemVal7_expected_prev[20] !== 1'bx ) && ( MemVal7_prev[20] !== MemVal7_expected_prev[20] )
		&& ((MemVal7_expected_prev[20] !== last_MemVal7_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[20] = MemVal7_expected_prev[20];
	end
	if (
		( MemVal7_expected_prev[21] !== 1'bx ) && ( MemVal7_prev[21] !== MemVal7_expected_prev[21] )
		&& ((MemVal7_expected_prev[21] !== last_MemVal7_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[21] = MemVal7_expected_prev[21];
	end
	if (
		( MemVal7_expected_prev[22] !== 1'bx ) && ( MemVal7_prev[22] !== MemVal7_expected_prev[22] )
		&& ((MemVal7_expected_prev[22] !== last_MemVal7_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[22] = MemVal7_expected_prev[22];
	end
	if (
		( MemVal7_expected_prev[23] !== 1'bx ) && ( MemVal7_prev[23] !== MemVal7_expected_prev[23] )
		&& ((MemVal7_expected_prev[23] !== last_MemVal7_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[23] = MemVal7_expected_prev[23];
	end
	if (
		( MemVal7_expected_prev[24] !== 1'bx ) && ( MemVal7_prev[24] !== MemVal7_expected_prev[24] )
		&& ((MemVal7_expected_prev[24] !== last_MemVal7_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[24] = MemVal7_expected_prev[24];
	end
	if (
		( MemVal7_expected_prev[25] !== 1'bx ) && ( MemVal7_prev[25] !== MemVal7_expected_prev[25] )
		&& ((MemVal7_expected_prev[25] !== last_MemVal7_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[25] = MemVal7_expected_prev[25];
	end
	if (
		( MemVal7_expected_prev[26] !== 1'bx ) && ( MemVal7_prev[26] !== MemVal7_expected_prev[26] )
		&& ((MemVal7_expected_prev[26] !== last_MemVal7_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[26] = MemVal7_expected_prev[26];
	end
	if (
		( MemVal7_expected_prev[27] !== 1'bx ) && ( MemVal7_prev[27] !== MemVal7_expected_prev[27] )
		&& ((MemVal7_expected_prev[27] !== last_MemVal7_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[27] = MemVal7_expected_prev[27];
	end
	if (
		( MemVal7_expected_prev[28] !== 1'bx ) && ( MemVal7_prev[28] !== MemVal7_expected_prev[28] )
		&& ((MemVal7_expected_prev[28] !== last_MemVal7_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[28] = MemVal7_expected_prev[28];
	end
	if (
		( MemVal7_expected_prev[29] !== 1'bx ) && ( MemVal7_prev[29] !== MemVal7_expected_prev[29] )
		&& ((MemVal7_expected_prev[29] !== last_MemVal7_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[29] = MemVal7_expected_prev[29];
	end
	if (
		( MemVal7_expected_prev[30] !== 1'bx ) && ( MemVal7_prev[30] !== MemVal7_expected_prev[30] )
		&& ((MemVal7_expected_prev[30] !== last_MemVal7_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[30] = MemVal7_expected_prev[30];
	end
	if (
		( MemVal7_expected_prev[31] !== 1'bx ) && ( MemVal7_prev[31] !== MemVal7_expected_prev[31] )
		&& ((MemVal7_expected_prev[31] !== last_MemVal7_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemVal7[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemVal7_expected_prev);
		$display ("     Real value = %b", MemVal7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemVal7_exp[31] = MemVal7_expected_prev[31];
	end
	if (
		( RD1_expected_prev[0] !== 1'bx ) && ( RD1_prev[0] !== RD1_expected_prev[0] )
		&& ((RD1_expected_prev[0] !== last_RD1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[0] = RD1_expected_prev[0];
	end
	if (
		( RD1_expected_prev[1] !== 1'bx ) && ( RD1_prev[1] !== RD1_expected_prev[1] )
		&& ((RD1_expected_prev[1] !== last_RD1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[1] = RD1_expected_prev[1];
	end
	if (
		( RD1_expected_prev[2] !== 1'bx ) && ( RD1_prev[2] !== RD1_expected_prev[2] )
		&& ((RD1_expected_prev[2] !== last_RD1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[2] = RD1_expected_prev[2];
	end
	if (
		( RD1_expected_prev[3] !== 1'bx ) && ( RD1_prev[3] !== RD1_expected_prev[3] )
		&& ((RD1_expected_prev[3] !== last_RD1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[3] = RD1_expected_prev[3];
	end
	if (
		( RD1_expected_prev[4] !== 1'bx ) && ( RD1_prev[4] !== RD1_expected_prev[4] )
		&& ((RD1_expected_prev[4] !== last_RD1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[4] = RD1_expected_prev[4];
	end
	if (
		( RD1_expected_prev[5] !== 1'bx ) && ( RD1_prev[5] !== RD1_expected_prev[5] )
		&& ((RD1_expected_prev[5] !== last_RD1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[5] = RD1_expected_prev[5];
	end
	if (
		( RD1_expected_prev[6] !== 1'bx ) && ( RD1_prev[6] !== RD1_expected_prev[6] )
		&& ((RD1_expected_prev[6] !== last_RD1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[6] = RD1_expected_prev[6];
	end
	if (
		( RD1_expected_prev[7] !== 1'bx ) && ( RD1_prev[7] !== RD1_expected_prev[7] )
		&& ((RD1_expected_prev[7] !== last_RD1_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[7] = RD1_expected_prev[7];
	end
	if (
		( RD1_expected_prev[8] !== 1'bx ) && ( RD1_prev[8] !== RD1_expected_prev[8] )
		&& ((RD1_expected_prev[8] !== last_RD1_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[8] = RD1_expected_prev[8];
	end
	if (
		( RD1_expected_prev[9] !== 1'bx ) && ( RD1_prev[9] !== RD1_expected_prev[9] )
		&& ((RD1_expected_prev[9] !== last_RD1_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[9] = RD1_expected_prev[9];
	end
	if (
		( RD1_expected_prev[10] !== 1'bx ) && ( RD1_prev[10] !== RD1_expected_prev[10] )
		&& ((RD1_expected_prev[10] !== last_RD1_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[10] = RD1_expected_prev[10];
	end
	if (
		( RD1_expected_prev[11] !== 1'bx ) && ( RD1_prev[11] !== RD1_expected_prev[11] )
		&& ((RD1_expected_prev[11] !== last_RD1_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[11] = RD1_expected_prev[11];
	end
	if (
		( RD1_expected_prev[12] !== 1'bx ) && ( RD1_prev[12] !== RD1_expected_prev[12] )
		&& ((RD1_expected_prev[12] !== last_RD1_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[12] = RD1_expected_prev[12];
	end
	if (
		( RD1_expected_prev[13] !== 1'bx ) && ( RD1_prev[13] !== RD1_expected_prev[13] )
		&& ((RD1_expected_prev[13] !== last_RD1_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[13] = RD1_expected_prev[13];
	end
	if (
		( RD1_expected_prev[14] !== 1'bx ) && ( RD1_prev[14] !== RD1_expected_prev[14] )
		&& ((RD1_expected_prev[14] !== last_RD1_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[14] = RD1_expected_prev[14];
	end
	if (
		( RD1_expected_prev[15] !== 1'bx ) && ( RD1_prev[15] !== RD1_expected_prev[15] )
		&& ((RD1_expected_prev[15] !== last_RD1_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[15] = RD1_expected_prev[15];
	end
	if (
		( RD1_expected_prev[16] !== 1'bx ) && ( RD1_prev[16] !== RD1_expected_prev[16] )
		&& ((RD1_expected_prev[16] !== last_RD1_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[16] = RD1_expected_prev[16];
	end
	if (
		( RD1_expected_prev[17] !== 1'bx ) && ( RD1_prev[17] !== RD1_expected_prev[17] )
		&& ((RD1_expected_prev[17] !== last_RD1_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[17] = RD1_expected_prev[17];
	end
	if (
		( RD1_expected_prev[18] !== 1'bx ) && ( RD1_prev[18] !== RD1_expected_prev[18] )
		&& ((RD1_expected_prev[18] !== last_RD1_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[18] = RD1_expected_prev[18];
	end
	if (
		( RD1_expected_prev[19] !== 1'bx ) && ( RD1_prev[19] !== RD1_expected_prev[19] )
		&& ((RD1_expected_prev[19] !== last_RD1_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[19] = RD1_expected_prev[19];
	end
	if (
		( RD1_expected_prev[20] !== 1'bx ) && ( RD1_prev[20] !== RD1_expected_prev[20] )
		&& ((RD1_expected_prev[20] !== last_RD1_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[20] = RD1_expected_prev[20];
	end
	if (
		( RD1_expected_prev[21] !== 1'bx ) && ( RD1_prev[21] !== RD1_expected_prev[21] )
		&& ((RD1_expected_prev[21] !== last_RD1_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[21] = RD1_expected_prev[21];
	end
	if (
		( RD1_expected_prev[22] !== 1'bx ) && ( RD1_prev[22] !== RD1_expected_prev[22] )
		&& ((RD1_expected_prev[22] !== last_RD1_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[22] = RD1_expected_prev[22];
	end
	if (
		( RD1_expected_prev[23] !== 1'bx ) && ( RD1_prev[23] !== RD1_expected_prev[23] )
		&& ((RD1_expected_prev[23] !== last_RD1_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[23] = RD1_expected_prev[23];
	end
	if (
		( RD1_expected_prev[24] !== 1'bx ) && ( RD1_prev[24] !== RD1_expected_prev[24] )
		&& ((RD1_expected_prev[24] !== last_RD1_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[24] = RD1_expected_prev[24];
	end
	if (
		( RD1_expected_prev[25] !== 1'bx ) && ( RD1_prev[25] !== RD1_expected_prev[25] )
		&& ((RD1_expected_prev[25] !== last_RD1_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[25] = RD1_expected_prev[25];
	end
	if (
		( RD1_expected_prev[26] !== 1'bx ) && ( RD1_prev[26] !== RD1_expected_prev[26] )
		&& ((RD1_expected_prev[26] !== last_RD1_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[26] = RD1_expected_prev[26];
	end
	if (
		( RD1_expected_prev[27] !== 1'bx ) && ( RD1_prev[27] !== RD1_expected_prev[27] )
		&& ((RD1_expected_prev[27] !== last_RD1_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[27] = RD1_expected_prev[27];
	end
	if (
		( RD1_expected_prev[28] !== 1'bx ) && ( RD1_prev[28] !== RD1_expected_prev[28] )
		&& ((RD1_expected_prev[28] !== last_RD1_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[28] = RD1_expected_prev[28];
	end
	if (
		( RD1_expected_prev[29] !== 1'bx ) && ( RD1_prev[29] !== RD1_expected_prev[29] )
		&& ((RD1_expected_prev[29] !== last_RD1_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[29] = RD1_expected_prev[29];
	end
	if (
		( RD1_expected_prev[30] !== 1'bx ) && ( RD1_prev[30] !== RD1_expected_prev[30] )
		&& ((RD1_expected_prev[30] !== last_RD1_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[30] = RD1_expected_prev[30];
	end
	if (
		( RD1_expected_prev[31] !== 1'bx ) && ( RD1_prev[31] !== RD1_expected_prev[31] )
		&& ((RD1_expected_prev[31] !== last_RD1_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RD1_exp[31] = RD1_expected_prev[31];
	end
	if (
		( RD2_expected_prev[0] !== 1'bx ) && ( RD2_prev[0] !== RD2_expected_prev[0] )
		&& ((RD2_expected_prev[0] !== last_RD2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[0] = RD2_expected_prev[0];
	end
	if (
		( RD2_expected_prev[1] !== 1'bx ) && ( RD2_prev[1] !== RD2_expected_prev[1] )
		&& ((RD2_expected_prev[1] !== last_RD2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[1] = RD2_expected_prev[1];
	end
	if (
		( RD2_expected_prev[2] !== 1'bx ) && ( RD2_prev[2] !== RD2_expected_prev[2] )
		&& ((RD2_expected_prev[2] !== last_RD2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[2] = RD2_expected_prev[2];
	end
	if (
		( RD2_expected_prev[3] !== 1'bx ) && ( RD2_prev[3] !== RD2_expected_prev[3] )
		&& ((RD2_expected_prev[3] !== last_RD2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[3] = RD2_expected_prev[3];
	end
	if (
		( RD2_expected_prev[4] !== 1'bx ) && ( RD2_prev[4] !== RD2_expected_prev[4] )
		&& ((RD2_expected_prev[4] !== last_RD2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[4] = RD2_expected_prev[4];
	end
	if (
		( RD2_expected_prev[5] !== 1'bx ) && ( RD2_prev[5] !== RD2_expected_prev[5] )
		&& ((RD2_expected_prev[5] !== last_RD2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[5] = RD2_expected_prev[5];
	end
	if (
		( RD2_expected_prev[6] !== 1'bx ) && ( RD2_prev[6] !== RD2_expected_prev[6] )
		&& ((RD2_expected_prev[6] !== last_RD2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[6] = RD2_expected_prev[6];
	end
	if (
		( RD2_expected_prev[7] !== 1'bx ) && ( RD2_prev[7] !== RD2_expected_prev[7] )
		&& ((RD2_expected_prev[7] !== last_RD2_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[7] = RD2_expected_prev[7];
	end
	if (
		( RD2_expected_prev[8] !== 1'bx ) && ( RD2_prev[8] !== RD2_expected_prev[8] )
		&& ((RD2_expected_prev[8] !== last_RD2_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[8] = RD2_expected_prev[8];
	end
	if (
		( RD2_expected_prev[9] !== 1'bx ) && ( RD2_prev[9] !== RD2_expected_prev[9] )
		&& ((RD2_expected_prev[9] !== last_RD2_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[9] = RD2_expected_prev[9];
	end
	if (
		( RD2_expected_prev[10] !== 1'bx ) && ( RD2_prev[10] !== RD2_expected_prev[10] )
		&& ((RD2_expected_prev[10] !== last_RD2_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[10] = RD2_expected_prev[10];
	end
	if (
		( RD2_expected_prev[11] !== 1'bx ) && ( RD2_prev[11] !== RD2_expected_prev[11] )
		&& ((RD2_expected_prev[11] !== last_RD2_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[11] = RD2_expected_prev[11];
	end
	if (
		( RD2_expected_prev[12] !== 1'bx ) && ( RD2_prev[12] !== RD2_expected_prev[12] )
		&& ((RD2_expected_prev[12] !== last_RD2_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[12] = RD2_expected_prev[12];
	end
	if (
		( RD2_expected_prev[13] !== 1'bx ) && ( RD2_prev[13] !== RD2_expected_prev[13] )
		&& ((RD2_expected_prev[13] !== last_RD2_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[13] = RD2_expected_prev[13];
	end
	if (
		( RD2_expected_prev[14] !== 1'bx ) && ( RD2_prev[14] !== RD2_expected_prev[14] )
		&& ((RD2_expected_prev[14] !== last_RD2_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[14] = RD2_expected_prev[14];
	end
	if (
		( RD2_expected_prev[15] !== 1'bx ) && ( RD2_prev[15] !== RD2_expected_prev[15] )
		&& ((RD2_expected_prev[15] !== last_RD2_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[15] = RD2_expected_prev[15];
	end
	if (
		( RD2_expected_prev[16] !== 1'bx ) && ( RD2_prev[16] !== RD2_expected_prev[16] )
		&& ((RD2_expected_prev[16] !== last_RD2_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[16] = RD2_expected_prev[16];
	end
	if (
		( RD2_expected_prev[17] !== 1'bx ) && ( RD2_prev[17] !== RD2_expected_prev[17] )
		&& ((RD2_expected_prev[17] !== last_RD2_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[17] = RD2_expected_prev[17];
	end
	if (
		( RD2_expected_prev[18] !== 1'bx ) && ( RD2_prev[18] !== RD2_expected_prev[18] )
		&& ((RD2_expected_prev[18] !== last_RD2_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[18] = RD2_expected_prev[18];
	end
	if (
		( RD2_expected_prev[19] !== 1'bx ) && ( RD2_prev[19] !== RD2_expected_prev[19] )
		&& ((RD2_expected_prev[19] !== last_RD2_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[19] = RD2_expected_prev[19];
	end
	if (
		( RD2_expected_prev[20] !== 1'bx ) && ( RD2_prev[20] !== RD2_expected_prev[20] )
		&& ((RD2_expected_prev[20] !== last_RD2_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[20] = RD2_expected_prev[20];
	end
	if (
		( RD2_expected_prev[21] !== 1'bx ) && ( RD2_prev[21] !== RD2_expected_prev[21] )
		&& ((RD2_expected_prev[21] !== last_RD2_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[21] = RD2_expected_prev[21];
	end
	if (
		( RD2_expected_prev[22] !== 1'bx ) && ( RD2_prev[22] !== RD2_expected_prev[22] )
		&& ((RD2_expected_prev[22] !== last_RD2_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[22] = RD2_expected_prev[22];
	end
	if (
		( RD2_expected_prev[23] !== 1'bx ) && ( RD2_prev[23] !== RD2_expected_prev[23] )
		&& ((RD2_expected_prev[23] !== last_RD2_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[23] = RD2_expected_prev[23];
	end
	if (
		( RD2_expected_prev[24] !== 1'bx ) && ( RD2_prev[24] !== RD2_expected_prev[24] )
		&& ((RD2_expected_prev[24] !== last_RD2_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[24] = RD2_expected_prev[24];
	end
	if (
		( RD2_expected_prev[25] !== 1'bx ) && ( RD2_prev[25] !== RD2_expected_prev[25] )
		&& ((RD2_expected_prev[25] !== last_RD2_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[25] = RD2_expected_prev[25];
	end
	if (
		( RD2_expected_prev[26] !== 1'bx ) && ( RD2_prev[26] !== RD2_expected_prev[26] )
		&& ((RD2_expected_prev[26] !== last_RD2_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[26] = RD2_expected_prev[26];
	end
	if (
		( RD2_expected_prev[27] !== 1'bx ) && ( RD2_prev[27] !== RD2_expected_prev[27] )
		&& ((RD2_expected_prev[27] !== last_RD2_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[27] = RD2_expected_prev[27];
	end
	if (
		( RD2_expected_prev[28] !== 1'bx ) && ( RD2_prev[28] !== RD2_expected_prev[28] )
		&& ((RD2_expected_prev[28] !== last_RD2_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[28] = RD2_expected_prev[28];
	end
	if (
		( RD2_expected_prev[29] !== 1'bx ) && ( RD2_prev[29] !== RD2_expected_prev[29] )
		&& ((RD2_expected_prev[29] !== last_RD2_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[29] = RD2_expected_prev[29];
	end
	if (
		( RD2_expected_prev[30] !== 1'bx ) && ( RD2_prev[30] !== RD2_expected_prev[30] )
		&& ((RD2_expected_prev[30] !== last_RD2_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[30] = RD2_expected_prev[30];
	end
	if (
		( RD2_expected_prev[31] !== 1'bx ) && ( RD2_prev[31] !== RD2_expected_prev[31] )
		&& ((RD2_expected_prev[31] !== last_RD2_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RD2_exp[31] = RD2_expected_prev[31];
	end
	if (
		( RegFile1_expected_prev[0] !== 1'bx ) && ( RegFile1_prev[0] !== RegFile1_expected_prev[0] )
		&& ((RegFile1_expected_prev[0] !== last_RegFile1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[0] = RegFile1_expected_prev[0];
	end
	if (
		( RegFile1_expected_prev[1] !== 1'bx ) && ( RegFile1_prev[1] !== RegFile1_expected_prev[1] )
		&& ((RegFile1_expected_prev[1] !== last_RegFile1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[1] = RegFile1_expected_prev[1];
	end
	if (
		( RegFile1_expected_prev[2] !== 1'bx ) && ( RegFile1_prev[2] !== RegFile1_expected_prev[2] )
		&& ((RegFile1_expected_prev[2] !== last_RegFile1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[2] = RegFile1_expected_prev[2];
	end
	if (
		( RegFile1_expected_prev[3] !== 1'bx ) && ( RegFile1_prev[3] !== RegFile1_expected_prev[3] )
		&& ((RegFile1_expected_prev[3] !== last_RegFile1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[3] = RegFile1_expected_prev[3];
	end
	if (
		( RegFile1_expected_prev[4] !== 1'bx ) && ( RegFile1_prev[4] !== RegFile1_expected_prev[4] )
		&& ((RegFile1_expected_prev[4] !== last_RegFile1_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[4] = RegFile1_expected_prev[4];
	end
	if (
		( RegFile1_expected_prev[5] !== 1'bx ) && ( RegFile1_prev[5] !== RegFile1_expected_prev[5] )
		&& ((RegFile1_expected_prev[5] !== last_RegFile1_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[5] = RegFile1_expected_prev[5];
	end
	if (
		( RegFile1_expected_prev[6] !== 1'bx ) && ( RegFile1_prev[6] !== RegFile1_expected_prev[6] )
		&& ((RegFile1_expected_prev[6] !== last_RegFile1_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[6] = RegFile1_expected_prev[6];
	end
	if (
		( RegFile1_expected_prev[7] !== 1'bx ) && ( RegFile1_prev[7] !== RegFile1_expected_prev[7] )
		&& ((RegFile1_expected_prev[7] !== last_RegFile1_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[7] = RegFile1_expected_prev[7];
	end
	if (
		( RegFile1_expected_prev[8] !== 1'bx ) && ( RegFile1_prev[8] !== RegFile1_expected_prev[8] )
		&& ((RegFile1_expected_prev[8] !== last_RegFile1_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[8] = RegFile1_expected_prev[8];
	end
	if (
		( RegFile1_expected_prev[9] !== 1'bx ) && ( RegFile1_prev[9] !== RegFile1_expected_prev[9] )
		&& ((RegFile1_expected_prev[9] !== last_RegFile1_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[9] = RegFile1_expected_prev[9];
	end
	if (
		( RegFile1_expected_prev[10] !== 1'bx ) && ( RegFile1_prev[10] !== RegFile1_expected_prev[10] )
		&& ((RegFile1_expected_prev[10] !== last_RegFile1_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[10] = RegFile1_expected_prev[10];
	end
	if (
		( RegFile1_expected_prev[11] !== 1'bx ) && ( RegFile1_prev[11] !== RegFile1_expected_prev[11] )
		&& ((RegFile1_expected_prev[11] !== last_RegFile1_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[11] = RegFile1_expected_prev[11];
	end
	if (
		( RegFile1_expected_prev[12] !== 1'bx ) && ( RegFile1_prev[12] !== RegFile1_expected_prev[12] )
		&& ((RegFile1_expected_prev[12] !== last_RegFile1_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[12] = RegFile1_expected_prev[12];
	end
	if (
		( RegFile1_expected_prev[13] !== 1'bx ) && ( RegFile1_prev[13] !== RegFile1_expected_prev[13] )
		&& ((RegFile1_expected_prev[13] !== last_RegFile1_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[13] = RegFile1_expected_prev[13];
	end
	if (
		( RegFile1_expected_prev[14] !== 1'bx ) && ( RegFile1_prev[14] !== RegFile1_expected_prev[14] )
		&& ((RegFile1_expected_prev[14] !== last_RegFile1_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[14] = RegFile1_expected_prev[14];
	end
	if (
		( RegFile1_expected_prev[15] !== 1'bx ) && ( RegFile1_prev[15] !== RegFile1_expected_prev[15] )
		&& ((RegFile1_expected_prev[15] !== last_RegFile1_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[15] = RegFile1_expected_prev[15];
	end
	if (
		( RegFile1_expected_prev[16] !== 1'bx ) && ( RegFile1_prev[16] !== RegFile1_expected_prev[16] )
		&& ((RegFile1_expected_prev[16] !== last_RegFile1_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[16] = RegFile1_expected_prev[16];
	end
	if (
		( RegFile1_expected_prev[17] !== 1'bx ) && ( RegFile1_prev[17] !== RegFile1_expected_prev[17] )
		&& ((RegFile1_expected_prev[17] !== last_RegFile1_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[17] = RegFile1_expected_prev[17];
	end
	if (
		( RegFile1_expected_prev[18] !== 1'bx ) && ( RegFile1_prev[18] !== RegFile1_expected_prev[18] )
		&& ((RegFile1_expected_prev[18] !== last_RegFile1_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[18] = RegFile1_expected_prev[18];
	end
	if (
		( RegFile1_expected_prev[19] !== 1'bx ) && ( RegFile1_prev[19] !== RegFile1_expected_prev[19] )
		&& ((RegFile1_expected_prev[19] !== last_RegFile1_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[19] = RegFile1_expected_prev[19];
	end
	if (
		( RegFile1_expected_prev[20] !== 1'bx ) && ( RegFile1_prev[20] !== RegFile1_expected_prev[20] )
		&& ((RegFile1_expected_prev[20] !== last_RegFile1_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[20] = RegFile1_expected_prev[20];
	end
	if (
		( RegFile1_expected_prev[21] !== 1'bx ) && ( RegFile1_prev[21] !== RegFile1_expected_prev[21] )
		&& ((RegFile1_expected_prev[21] !== last_RegFile1_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[21] = RegFile1_expected_prev[21];
	end
	if (
		( RegFile1_expected_prev[22] !== 1'bx ) && ( RegFile1_prev[22] !== RegFile1_expected_prev[22] )
		&& ((RegFile1_expected_prev[22] !== last_RegFile1_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[22] = RegFile1_expected_prev[22];
	end
	if (
		( RegFile1_expected_prev[23] !== 1'bx ) && ( RegFile1_prev[23] !== RegFile1_expected_prev[23] )
		&& ((RegFile1_expected_prev[23] !== last_RegFile1_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[23] = RegFile1_expected_prev[23];
	end
	if (
		( RegFile1_expected_prev[24] !== 1'bx ) && ( RegFile1_prev[24] !== RegFile1_expected_prev[24] )
		&& ((RegFile1_expected_prev[24] !== last_RegFile1_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[24] = RegFile1_expected_prev[24];
	end
	if (
		( RegFile1_expected_prev[25] !== 1'bx ) && ( RegFile1_prev[25] !== RegFile1_expected_prev[25] )
		&& ((RegFile1_expected_prev[25] !== last_RegFile1_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[25] = RegFile1_expected_prev[25];
	end
	if (
		( RegFile1_expected_prev[26] !== 1'bx ) && ( RegFile1_prev[26] !== RegFile1_expected_prev[26] )
		&& ((RegFile1_expected_prev[26] !== last_RegFile1_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[26] = RegFile1_expected_prev[26];
	end
	if (
		( RegFile1_expected_prev[27] !== 1'bx ) && ( RegFile1_prev[27] !== RegFile1_expected_prev[27] )
		&& ((RegFile1_expected_prev[27] !== last_RegFile1_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[27] = RegFile1_expected_prev[27];
	end
	if (
		( RegFile1_expected_prev[28] !== 1'bx ) && ( RegFile1_prev[28] !== RegFile1_expected_prev[28] )
		&& ((RegFile1_expected_prev[28] !== last_RegFile1_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[28] = RegFile1_expected_prev[28];
	end
	if (
		( RegFile1_expected_prev[29] !== 1'bx ) && ( RegFile1_prev[29] !== RegFile1_expected_prev[29] )
		&& ((RegFile1_expected_prev[29] !== last_RegFile1_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[29] = RegFile1_expected_prev[29];
	end
	if (
		( RegFile1_expected_prev[30] !== 1'bx ) && ( RegFile1_prev[30] !== RegFile1_expected_prev[30] )
		&& ((RegFile1_expected_prev[30] !== last_RegFile1_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[30] = RegFile1_expected_prev[30];
	end
	if (
		( RegFile1_expected_prev[31] !== 1'bx ) && ( RegFile1_prev[31] !== RegFile1_expected_prev[31] )
		&& ((RegFile1_expected_prev[31] !== last_RegFile1_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegFile1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegFile1_expected_prev);
		$display ("     Real value = %b", RegFile1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegFile1_exp[31] = RegFile1_expected_prev[31];
	end
	if (
		( display_led_expected_prev[0] !== 1'bx ) && ( display_led_prev[0] !== display_led_expected_prev[0] )
		&& ((display_led_expected_prev[0] !== last_display_led_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[0] = display_led_expected_prev[0];
	end
	if (
		( display_led_expected_prev[1] !== 1'bx ) && ( display_led_prev[1] !== display_led_expected_prev[1] )
		&& ((display_led_expected_prev[1] !== last_display_led_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[1] = display_led_expected_prev[1];
	end
	if (
		( display_led_expected_prev[2] !== 1'bx ) && ( display_led_prev[2] !== display_led_expected_prev[2] )
		&& ((display_led_expected_prev[2] !== last_display_led_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[2] = display_led_expected_prev[2];
	end
	if (
		( display_led_expected_prev[3] !== 1'bx ) && ( display_led_prev[3] !== display_led_expected_prev[3] )
		&& ((display_led_expected_prev[3] !== last_display_led_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[3] = display_led_expected_prev[3];
	end
	if (
		( display_led_expected_prev[4] !== 1'bx ) && ( display_led_prev[4] !== display_led_expected_prev[4] )
		&& ((display_led_expected_prev[4] !== last_display_led_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[4] = display_led_expected_prev[4];
	end
	if (
		( display_led_expected_prev[5] !== 1'bx ) && ( display_led_prev[5] !== display_led_expected_prev[5] )
		&& ((display_led_expected_prev[5] !== last_display_led_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[5] = display_led_expected_prev[5];
	end
	if (
		( display_led_expected_prev[6] !== 1'bx ) && ( display_led_prev[6] !== display_led_expected_prev[6] )
		&& ((display_led_expected_prev[6] !== last_display_led_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_led_exp[6] = display_led_expected_prev[6];
	end
	if (
		( pipeline_leds_expected_prev[0] !== 1'bx ) && ( pipeline_leds_prev[0] !== pipeline_leds_expected_prev[0] )
		&& ((pipeline_leds_expected_prev[0] !== last_pipeline_leds_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[0] = pipeline_leds_expected_prev[0];
	end
	if (
		( pipeline_leds_expected_prev[1] !== 1'bx ) && ( pipeline_leds_prev[1] !== pipeline_leds_expected_prev[1] )
		&& ((pipeline_leds_expected_prev[1] !== last_pipeline_leds_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[1] = pipeline_leds_expected_prev[1];
	end
	if (
		( pipeline_leds_expected_prev[2] !== 1'bx ) && ( pipeline_leds_prev[2] !== pipeline_leds_expected_prev[2] )
		&& ((pipeline_leds_expected_prev[2] !== last_pipeline_leds_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[2] = pipeline_leds_expected_prev[2];
	end
	if (
		( pipeline_leds_expected_prev[3] !== 1'bx ) && ( pipeline_leds_prev[3] !== pipeline_leds_expected_prev[3] )
		&& ((pipeline_leds_expected_prev[3] !== last_pipeline_leds_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[3] = pipeline_leds_expected_prev[3];
	end
	if (
		( pipeline_leds_expected_prev[4] !== 1'bx ) && ( pipeline_leds_prev[4] !== pipeline_leds_expected_prev[4] )
		&& ((pipeline_leds_expected_prev[4] !== last_pipeline_leds_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[4] = pipeline_leds_expected_prev[4];
	end
	if (
		( pipeline_leds_expected_prev[5] !== 1'bx ) && ( pipeline_leds_prev[5] !== pipeline_leds_expected_prev[5] )
		&& ((pipeline_leds_expected_prev[5] !== last_pipeline_leds_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[5] = pipeline_leds_expected_prev[5];
	end
	if (
		( pipeline_leds_expected_prev[6] !== 1'bx ) && ( pipeline_leds_prev[6] !== pipeline_leds_expected_prev[6] )
		&& ((pipeline_leds_expected_prev[6] !== last_pipeline_leds_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[6] = pipeline_leds_expected_prev[6];
	end
	if (
		( pipeline_leds_expected_prev[7] !== 1'bx ) && ( pipeline_leds_prev[7] !== pipeline_leds_expected_prev[7] )
		&& ((pipeline_leds_expected_prev[7] !== last_pipeline_leds_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pipeline_leds[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pipeline_leds_expected_prev);
		$display ("     Real value = %b", pipeline_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pipeline_leds_exp[7] = pipeline_leds_expected_prev[7];
	end
	if (
		( prode_register_file_expected_prev[0] !== 1'bx ) && ( prode_register_file_prev[0] !== prode_register_file_expected_prev[0] )
		&& ((prode_register_file_expected_prev[0] !== last_prode_register_file_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[0] = prode_register_file_expected_prev[0];
	end
	if (
		( prode_register_file_expected_prev[1] !== 1'bx ) && ( prode_register_file_prev[1] !== prode_register_file_expected_prev[1] )
		&& ((prode_register_file_expected_prev[1] !== last_prode_register_file_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[1] = prode_register_file_expected_prev[1];
	end
	if (
		( prode_register_file_expected_prev[2] !== 1'bx ) && ( prode_register_file_prev[2] !== prode_register_file_expected_prev[2] )
		&& ((prode_register_file_expected_prev[2] !== last_prode_register_file_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[2] = prode_register_file_expected_prev[2];
	end
	if (
		( prode_register_file_expected_prev[3] !== 1'bx ) && ( prode_register_file_prev[3] !== prode_register_file_expected_prev[3] )
		&& ((prode_register_file_expected_prev[3] !== last_prode_register_file_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[3] = prode_register_file_expected_prev[3];
	end
	if (
		( prode_register_file_expected_prev[4] !== 1'bx ) && ( prode_register_file_prev[4] !== prode_register_file_expected_prev[4] )
		&& ((prode_register_file_expected_prev[4] !== last_prode_register_file_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[4] = prode_register_file_expected_prev[4];
	end
	if (
		( prode_register_file_expected_prev[5] !== 1'bx ) && ( prode_register_file_prev[5] !== prode_register_file_expected_prev[5] )
		&& ((prode_register_file_expected_prev[5] !== last_prode_register_file_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[5] = prode_register_file_expected_prev[5];
	end
	if (
		( prode_register_file_expected_prev[6] !== 1'bx ) && ( prode_register_file_prev[6] !== prode_register_file_expected_prev[6] )
		&& ((prode_register_file_expected_prev[6] !== last_prode_register_file_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[6] = prode_register_file_expected_prev[6];
	end
	if (
		( prode_register_file_expected_prev[7] !== 1'bx ) && ( prode_register_file_prev[7] !== prode_register_file_expected_prev[7] )
		&& ((prode_register_file_expected_prev[7] !== last_prode_register_file_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[7] = prode_register_file_expected_prev[7];
	end
	if (
		( prode_register_file_expected_prev[8] !== 1'bx ) && ( prode_register_file_prev[8] !== prode_register_file_expected_prev[8] )
		&& ((prode_register_file_expected_prev[8] !== last_prode_register_file_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[8] = prode_register_file_expected_prev[8];
	end
	if (
		( prode_register_file_expected_prev[9] !== 1'bx ) && ( prode_register_file_prev[9] !== prode_register_file_expected_prev[9] )
		&& ((prode_register_file_expected_prev[9] !== last_prode_register_file_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[9] = prode_register_file_expected_prev[9];
	end
	if (
		( prode_register_file_expected_prev[10] !== 1'bx ) && ( prode_register_file_prev[10] !== prode_register_file_expected_prev[10] )
		&& ((prode_register_file_expected_prev[10] !== last_prode_register_file_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[10] = prode_register_file_expected_prev[10];
	end
	if (
		( prode_register_file_expected_prev[11] !== 1'bx ) && ( prode_register_file_prev[11] !== prode_register_file_expected_prev[11] )
		&& ((prode_register_file_expected_prev[11] !== last_prode_register_file_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[11] = prode_register_file_expected_prev[11];
	end
	if (
		( prode_register_file_expected_prev[12] !== 1'bx ) && ( prode_register_file_prev[12] !== prode_register_file_expected_prev[12] )
		&& ((prode_register_file_expected_prev[12] !== last_prode_register_file_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[12] = prode_register_file_expected_prev[12];
	end
	if (
		( prode_register_file_expected_prev[13] !== 1'bx ) && ( prode_register_file_prev[13] !== prode_register_file_expected_prev[13] )
		&& ((prode_register_file_expected_prev[13] !== last_prode_register_file_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[13] = prode_register_file_expected_prev[13];
	end
	if (
		( prode_register_file_expected_prev[14] !== 1'bx ) && ( prode_register_file_prev[14] !== prode_register_file_expected_prev[14] )
		&& ((prode_register_file_expected_prev[14] !== last_prode_register_file_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[14] = prode_register_file_expected_prev[14];
	end
	if (
		( prode_register_file_expected_prev[15] !== 1'bx ) && ( prode_register_file_prev[15] !== prode_register_file_expected_prev[15] )
		&& ((prode_register_file_expected_prev[15] !== last_prode_register_file_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[15] = prode_register_file_expected_prev[15];
	end
	if (
		( prode_register_file_expected_prev[16] !== 1'bx ) && ( prode_register_file_prev[16] !== prode_register_file_expected_prev[16] )
		&& ((prode_register_file_expected_prev[16] !== last_prode_register_file_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[16] = prode_register_file_expected_prev[16];
	end
	if (
		( prode_register_file_expected_prev[17] !== 1'bx ) && ( prode_register_file_prev[17] !== prode_register_file_expected_prev[17] )
		&& ((prode_register_file_expected_prev[17] !== last_prode_register_file_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[17] = prode_register_file_expected_prev[17];
	end
	if (
		( prode_register_file_expected_prev[18] !== 1'bx ) && ( prode_register_file_prev[18] !== prode_register_file_expected_prev[18] )
		&& ((prode_register_file_expected_prev[18] !== last_prode_register_file_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[18] = prode_register_file_expected_prev[18];
	end
	if (
		( prode_register_file_expected_prev[19] !== 1'bx ) && ( prode_register_file_prev[19] !== prode_register_file_expected_prev[19] )
		&& ((prode_register_file_expected_prev[19] !== last_prode_register_file_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[19] = prode_register_file_expected_prev[19];
	end
	if (
		( prode_register_file_expected_prev[20] !== 1'bx ) && ( prode_register_file_prev[20] !== prode_register_file_expected_prev[20] )
		&& ((prode_register_file_expected_prev[20] !== last_prode_register_file_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[20] = prode_register_file_expected_prev[20];
	end
	if (
		( prode_register_file_expected_prev[21] !== 1'bx ) && ( prode_register_file_prev[21] !== prode_register_file_expected_prev[21] )
		&& ((prode_register_file_expected_prev[21] !== last_prode_register_file_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[21] = prode_register_file_expected_prev[21];
	end
	if (
		( prode_register_file_expected_prev[22] !== 1'bx ) && ( prode_register_file_prev[22] !== prode_register_file_expected_prev[22] )
		&& ((prode_register_file_expected_prev[22] !== last_prode_register_file_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[22] = prode_register_file_expected_prev[22];
	end
	if (
		( prode_register_file_expected_prev[23] !== 1'bx ) && ( prode_register_file_prev[23] !== prode_register_file_expected_prev[23] )
		&& ((prode_register_file_expected_prev[23] !== last_prode_register_file_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[23] = prode_register_file_expected_prev[23];
	end
	if (
		( prode_register_file_expected_prev[24] !== 1'bx ) && ( prode_register_file_prev[24] !== prode_register_file_expected_prev[24] )
		&& ((prode_register_file_expected_prev[24] !== last_prode_register_file_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[24] = prode_register_file_expected_prev[24];
	end
	if (
		( prode_register_file_expected_prev[25] !== 1'bx ) && ( prode_register_file_prev[25] !== prode_register_file_expected_prev[25] )
		&& ((prode_register_file_expected_prev[25] !== last_prode_register_file_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[25] = prode_register_file_expected_prev[25];
	end
	if (
		( prode_register_file_expected_prev[26] !== 1'bx ) && ( prode_register_file_prev[26] !== prode_register_file_expected_prev[26] )
		&& ((prode_register_file_expected_prev[26] !== last_prode_register_file_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[26] = prode_register_file_expected_prev[26];
	end
	if (
		( prode_register_file_expected_prev[27] !== 1'bx ) && ( prode_register_file_prev[27] !== prode_register_file_expected_prev[27] )
		&& ((prode_register_file_expected_prev[27] !== last_prode_register_file_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[27] = prode_register_file_expected_prev[27];
	end
	if (
		( prode_register_file_expected_prev[28] !== 1'bx ) && ( prode_register_file_prev[28] !== prode_register_file_expected_prev[28] )
		&& ((prode_register_file_expected_prev[28] !== last_prode_register_file_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[28] = prode_register_file_expected_prev[28];
	end
	if (
		( prode_register_file_expected_prev[29] !== 1'bx ) && ( prode_register_file_prev[29] !== prode_register_file_expected_prev[29] )
		&& ((prode_register_file_expected_prev[29] !== last_prode_register_file_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[29] = prode_register_file_expected_prev[29];
	end
	if (
		( prode_register_file_expected_prev[30] !== 1'bx ) && ( prode_register_file_prev[30] !== prode_register_file_expected_prev[30] )
		&& ((prode_register_file_expected_prev[30] !== last_prode_register_file_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[30] = prode_register_file_expected_prev[30];
	end
	if (
		( prode_register_file_expected_prev[31] !== 1'bx ) && ( prode_register_file_prev[31] !== prode_register_file_expected_prev[31] )
		&& ((prode_register_file_expected_prev[31] !== last_prode_register_file_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_prode_register_file_exp[31] = prode_register_file_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg [1:0] sw;
// wires                                               
wire [31:0] ALUResult;
wire [31:0] MemReadData;
wire [31:0] MemVal2;
wire [31:0] MemVal7;
wire [31:0] MemWriteData;
wire [31:0] RD1;
wire [31:0] RD2;
wire [31:0] RegFile1;
wire [31:0] RegFile9;
wire [6:0] display_led;
wire [7:0] pipeline_leds;
wire [31:0] prode_register_file;

wire sampler;                             

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.ALUResult(ALUResult),
	.MemReadData(MemReadData),
	.MemVal2(MemVal2),
	.MemVal7(MemVal7),
	.MemWriteData(MemWriteData),
	.RD1(RD1),
	.RD2(RD2),
	.RegFile1(RegFile1),
	.RegFile9(RegFile9),
	.clk(clk),
	.display_led(display_led),
	.pipeline_leds(pipeline_leds),
	.prode_register_file(prode_register_file),
	.rst(rst),
	.sw(sw)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #80000 1'b0;
	rst = #40000 1'b1;
	rst = #650000 1'b0;
	rst = #40000 1'b1;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b0;
	sw[1] = #580000 1'b1;
	sw[1] = #40000 1'b0;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b0;
	sw[0] = #240000 1'b1;
	sw[0] = #40000 1'b0;
end 

top_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sw(sw),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.ALUResult(ALUResult),
	.MemReadData(MemReadData),
	.MemVal2(MemVal2),
	.MemVal7(MemVal7),
	.MemWriteData(MemWriteData),
	.RD1(RD1),
	.RD2(RD2),
	.RegFile1(RegFile1),
	.RegFile9(RegFile9),
	.display_led(display_led),
	.pipeline_leds(pipeline_leds),
	.prode_register_file(prode_register_file),
	.sampler_rx(sampler)
);
endmodule

